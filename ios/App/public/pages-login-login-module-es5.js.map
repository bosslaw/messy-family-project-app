{"version":3,"sources":["webpack:///src/app/pages/login/login.page.html","webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/pages/login/login.module.ts","webpack:///src/app/pages/login/login.page.scss","webpack:///src/app/pages/login/login.page.ts","webpack:///src/app/services/notifications/notifications.service.ts","webpack:///src/app/services/push-notifications/push-notifications.service.ts"],"names":["routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","router","authService","storageService","toastService","notifServices","pushNoficationService","postData","email","password","trim","length","notify","validateInputs","login","subscribe","res","userData","store","AUTH","navigate","presentToast","error","selector","template","NotificationsService","localNotifications","schedule","id","title","text","icon","providedIn","PushNotifications","PushNotificationsService","requestPermission","then","result","granted","register","addListener","token","alert","value","notification","JSON","stringify"],"mappings":"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","file":"pages-login-login-module-es5.js","sourcesContent":["export default \"<ion-content class=\\\"ion-padding\\\">\\n  <h1 class=\\\"center\\\">SIGN IN</h1>\\n  <form>\\n    <ion-list>\\n      <ion-item>\\n      <ion-label position=\\\"stacked\\\">Email</ion-label>\\n      <ion-input autocomplete=\\\"off\\\" name=\\\"email\\\" type=\\\"text\\\" [(ngModel)]=\\\"postData.email\\\"></ion-input>\\n      </ion-item>\\n      \\n      <ion-item>\\n      <ion-label position=\\\"stacked\\\">Password</ion-label>\\n      <ion-input autocomplete=\\\"off\\\" name=\\\"password\\\" type=\\\"password\\\" [(ngModel)]=\\\"postData.password\\\"></ion-input>\\n      </ion-item>\\n      \\n    </ion-list>\\n    <ion-button expand=\\\"block\\\" share=\\\"round\\\" (click)=\\\"loginAction()\\\" color=\\\"success\\\">Login</ion-button>\\n    </form>\\n    <a routerLink=\\\"/signup\\\">Create Account</a>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthConstants } from 'src/app/config/auth-constants';\nimport { AuthService } from 'src/app/services/auth/auth.service';\nimport { NotificationsService } from 'src/app/services/notifications/notifications.service';\nimport { PushNotificationsService } from 'src/app/services/push-notifications/push-notifications.service';\nimport { StorageService } from 'src/app/services/storage/storage.service';\nimport { ToastService } from 'src/app/services/toast/toast.service';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  public postData = {\n    email: '',\n    password: ''\n  }\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private storageService: StorageService,\n    private toastService: ToastService,\n    private notifServices: NotificationsService,\n    private pushNoficationService: PushNotificationsService\n  ) { }\n\n  ngOnInit() {\n    // this.testPushNotification();\n    // this.testNotification();\n  }\n\n  validateInputs() {\n    const email = this.postData.email.trim();\n    const password = this.postData.password.trim();\n\n    return (this.postData.email && this.postData.password && email.length > 0 && password.length > 0)\n  }\n\n  testPushNotification() {\n    this.pushNoficationService.notify();\n  }\n\n  testNotification() {\n    this.notifServices.notify();\n  }\n\n  loginAction() {\n\n    if(this.validateInputs()) {\n      this.authService.login(this.postData).subscribe((res: any) => {\n        if(res.userData.length) {\n          this.storageService.store(AuthConstants.AUTH, res.userData[0]);\n          this.router.navigate(['home'])\n        } else {\n          this.toastService.presentToast('Invalid credentials');\n        }\n      },\n      (error: any) => {\n        this.toastService.presentToast('Network Connection Error');\n      })\n    } else {\n      this.toastService.presentToast('Please give some information');\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { LocalNotifications } from '@ionic-native/local-notifications/ngx';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n\n  constructor(private localNotifications: LocalNotifications) { }\n\n  notify() {\n\n    this.localNotifications.schedule([{\n      id: 1,\n      title: 'Messy Family Notification',\n      text: 'Upcoming Event',\n      icon: ''\n   }]);\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Plugins,\n  PushNotification,\n  PushNotificationActionPerformed,\n  PushNotificationToken\n} from '@capacitor/core';\n\n\n\nconst { PushNotifications } = Plugins;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PushNotificationsService {\n\n  constructor() { }\n\n  notify() {\n\n    PushNotifications.requestPermission().then( result => {\n      if (result.granted) {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n      }\n    });\n\n\n    PushNotifications.addListener('registration',\n      (token: PushNotificationToken) => {\n        alert('Push registration success, token: ' + token.value);\n      }\n    );\n\n    PushNotifications.addListener('pushNotificationReceived',\n      (notification: PushNotification) => {\n        alert('Push received: ' + JSON.stringify(notification));\n      }\n    );\n\n    PushNotifications.addListener('pushNotificationActionPerformed',\n      (notification: PushNotificationActionPerformed) => {\n        alert('Push action performed: ' + JSON.stringify(notification));\n      }\n    );\n\n\n  }\n}\n"]}